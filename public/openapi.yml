openapi: 3.0.3
info:
  title: Q Medis API
  version: 1.0.0
  description: Static OpenAPI spec
servers:
  - url: http://localhost:8000
paths:
  /api:
    get:
      tags: [System]
      summary: API health (welcome)
      responses:
        '200':
          description: OK
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200': { description: OK }
        '401': { description: Invalid credentials }
  /api/auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Invalid refresh token }
  /api/auth/me:
    get:
      tags: [Auth]
      summary: Get authenticated user
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/auth/logout:
    post:
      tags: [Auth]
      summary: Logout and revoke refresh token
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/display/lokets:
    get:
      tags: [Display]
      summary: List lokets (public)
      responses:
        '200': { description: OK }
  /api/display/lokets/{loket}:
    get:
      tags: [Display]
      summary: Get display data for a loket (public)
      parameters:
        - in: path
          name: loket
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /api/display/overview:
    get:
      tags: [Display]
      summary: Display overview for all lokets (public)
      responses:
        '200': { description: OK }
  /api/lokets:
    get:
      tags: [Lokets]
      summary: List lokets (paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: per_page
          schema: { type: integer, default: 15 }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: order_by
          schema:
            type: string
            enum: [id, nama_loket, kode_prefix, created_at, updated_at]
        - in: query
          name: order_dir
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      tags: [Lokets]
      summary: Create a loket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoketCreateRequest'
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
  /api/lokets/{loket}:
    get:
      tags: [Lokets]
      summary: Get a loket by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: loket
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not found }
  /api/users:
    get:
      tags: [Users]
      summary: List users (paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: per_page
          schema: { type: integer, default: 15 }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: order_by
          schema:
            type: string
            enum: [id, name, email, role, created_at, updated_at]
        - in: query
          name: order_dir
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      tags: [Users]
      summary: Create user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
  /api/users/{user}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not found }
    put:
      tags: [Users]
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not found }
    delete:
      tags: [Users]
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not found }
  /api/antrians:
    get:
      tags: [Antrians]
      summary: List antrians (paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: per_page
          schema: { type: integer, default: 15 }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: order_by
          schema:
            type: string
            enum: [id, loket_id, nomor_antrian, status, waktu_panggil, created_at, updated_at]
        - in: query
          name: order_dir
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      tags: [Antrians]
      summary: Create an antrian
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AntrianCreateRequest'
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
  /api/antrians/{antrian}:
    get:
      tags: [Antrians]
      summary: Get an antrian by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: antrian
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not found }
    put:
      tags: [Antrians]
      summary: Update an antrian status
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: antrian
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AntrianUpdateRequest'
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not found }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoketCreateRequest:
      type: object
      required: [nama_loket, kode_prefix]
      properties:
        nama_loket: { type: string, maxLength: 100 }
        kode_prefix: { type: string, maxLength: 5 }
        deskripsi: { type: string, nullable: true }
    LoketUpdateRequest:
      type: object
      properties:
        nama_loket: { type: string, maxLength: 100 }
        kode_prefix: { type: string, maxLength: 5 }
        deskripsi: { type: string, nullable: true }
    AntrianCreateRequest:
      type: object
      required: [loket_id]
      properties:
        loket_id: { type: integer }
    AntrianUpdateRequest:
      type: object
      required: [status]
      properties:
        status: { type: string, example: dipanggil }
    UserCreateRequest:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string, maxLength: 255 }
        email: { type: string, format: email, maxLength: 255 }
        password: { type: string, minLength: 6 }
        role: { type: string, nullable: true, maxLength: 50 }
        avatar: { type: string, nullable: true, maxLength: 2048 }
        google_id: { type: string, nullable: true, maxLength: 255 }
    UserUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 255 }
        email: { type: string, format: email, maxLength: 255 }
        password: { type: string, minLength: 6 }
        role: { type: string, nullable: true, maxLength: 50 }
        avatar: { type: string, nullable: true, maxLength: 2048 }
        google_id: { type: string, nullable: true, maxLength: 255 }
